const cloudinary = require("cloudinary").v2;
const fs = require("fs");
const path = require("path");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: "donvdhjbe",
  api_key: "558335862182769",
  api_secret: "JxzGoADiIScnF9KBkCMnNx0kXvU",
});

// –ü—É—Ç–∏
const imagesDir = path.join(__dirname, "../public/images");
const logFile = path.join(__dirname, "upload-log.json");

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–æ–≤
let uploadLog = {};
if (fs.existsSync(logFile)) {
  uploadLog = JSON.parse(fs.readFileSync(logFile, "utf8"));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
function getAllImages(dir, baseDir = imagesDir) {
  let results = [];
  const files = fs.readdirSync(dir);

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      results = results.concat(getAllImages(filePath, baseDir));
    } else if (/\.(jpg|jpeg|png|webp|gif)$/i.test(file)) {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞–ø–∫–∏ images
      const relativePath = path.relative(baseDir, filePath);
      const publicPath = `/images/${relativePath.replace(/\\/g, "/")}`;

      results.push({
        localPath: filePath,
        relativePath: relativePath,
        publicPath: publicPath,
        fileName: file,
      });
    }
  }

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function uploadImage(imageInfo) {
  try {
    // –°–æ–∑–¥–∞–µ–º public_id —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    const folderPath = path.dirname(imageInfo.relativePath).replace(/\\/g, "/");
    const fileName = path.basename(
      imageInfo.fileName,
      path.extname(imageInfo.fileName)
    );
    const public_id =
      folderPath === "." ? fileName : `${folderPath}/${fileName}`;

    console.log(`–ó–∞–≥—Ä—É–∂–∞—é: ${imageInfo.publicPath} -> ${public_id}`);

    const result = await cloudinary.uploader.upload(imageInfo.localPath, {
      public_id: public_id,
      folder: "onlypc-images",
      resource_type: "image",
      overwrite: true,
      quality: "auto",
      fetch_format: "auto",
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
    uploadLog[imageInfo.publicPath] = {
      cloudinary_url: result.secure_url,
      public_id: result.public_id,
      uploaded_at: new Date().toISOString(),
      original_size: fs.statSync(imageInfo.localPath).size,
      cloudinary_size: result.bytes,
    };

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${imageInfo.publicPath}`);
    return result;
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${imageInfo.publicPath}:`,
      error.message
    );
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function uploadAllImages() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Cloudinary...\n");

  const images = getAllImages(imagesDir);
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n`);

  let uploaded = 0;
  let skipped = 0;
  let errors = 0;

  for (let i = 0; i < images.length; i++) {
    const imageInfo = images[i];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (uploadLog[imageInfo.publicPath]) {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω): ${imageInfo.publicPath}`);
      skipped++;
      continue;
    }

    const result = await uploadImage(imageInfo);

    if (result) {
      uploaded++;
    } else {
      errors++;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
    if ((i + 1) % 10 === 0) {
      fs.writeFileSync(logFile, JSON.stringify(uploadLog, null, 2));
      console.log(`\nüìÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${images.length}\n`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞
  fs.writeFileSync(logFile, JSON.stringify(uploadLog, null, 2));

  console.log("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploaded}`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
  console.log(`üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${logFile}`);

  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å URL –º–∞–ø–ø–∏–Ω–≥–æ–º
  const urlMapping = {};
  Object.keys(uploadLog).forEach((localPath) => {
    urlMapping[localPath] = uploadLog[localPath].cloudinary_url;
  });

  const mappingFile = path.join(__dirname, "url-mapping.json");
  fs.writeFileSync(mappingFile, JSON.stringify(urlMapping, null, 2));
  console.log(`üîó URL –º–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${mappingFile}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–º–µ–Ω—ã –≤ –∫–æ–¥–µ
function generateReplaceScript() {
  if (!fs.existsSync(logFile)) {
    console.log("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!");
    return;
  }

  const uploadLog = JSON.parse(fs.readFileSync(logFile, "utf8"));

  const replaceScript = path.join(__dirname, "replace-image-urls.js");
  const scriptContent = `
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –Ω–∞ Cloudinary URLs
const fs = require('fs');
const path = require('path');

const urlMapping = ${JSON.stringify(
    Object.fromEntries(
      Object.entries(uploadLog).map(([localPath, info]) => [
        localPath,
        info.cloudinary_url,
      ])
    ),
    null,
    2
  )};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ
function replaceInFile(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  let changed = false;
  Object.entries(urlMapping).forEach(([localPath, cloudinaryUrl]) => {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    if (content.includes(localPath)) {
      content = content.replaceAll(localPath, cloudinaryUrl);
      changed = true;
    }
  });
    if (changed) {
    fs.writeFileSync(filePath, content);
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ' + filePath);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ TypeScript –∏ JavaScript —Ñ–∞–π–ª—ã
const srcDir = path.join(__dirname, '../src');
function updateFiles(dir) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      updateFiles(filePath);
    } else if (/\\.(ts|tsx|js|jsx)$/.test(file)) {
      replaceInFile(filePath);
    }
  }
}

console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É URL –≤ –∫–æ–¥–µ...');
updateFiles(srcDir);
console.log('‚úÖ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
`;

  fs.writeFileSync(replaceScript, scriptContent);
  console.log(`üîß –°–∫—Ä–∏–ø—Ç –∑–∞–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω: ${replaceScript}`);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const command = process.argv[2];

  if (command === "upload") {
    uploadAllImages().catch(console.error);
  } else if (command === "replace") {
    generateReplaceScript();
  } else {
    console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
    console.log(
      "  node upload-to-cloudinary.js upload   - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    );
    console.log(
      "  node upload-to-cloudinary.js replace  - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–º–µ–Ω—ã URL"
    );
  }
}
